{
  "name": "Violation-comments-to-GitHub-jenkins-plugin",
  "tagline": "Jenkins plugin that comments GitHub pull requests with code analyzer comments.",
  "body": "# Violation Comments to GitHub Jenkins Plugin\r\n\r\n[![Build Status](https://jenkins.ci.cloudbees.com/job/plugins/job/violation-comments-to-github-plugin/badge/icon)](https://jenkins.ci.cloudbees.com/job/plugins/job/violation-comments-to-github-plugin/)\r\n\r\nThis is a Jenkins plugin for [Violation Comments to GitHub Lib](https://github.com/tomasbjerre/violation-comments-to-github-lib). This plugin will find report files from static code analysis and comment GitHub pull requests with the content.\r\n\r\nYou can have a look at [violations-test](https://github.com/tomasbjerre/violations-test/pull/2) to see what the result may look like.\r\n\r\nIt supports:\r\n * [_AndoidLint_](http://developer.android.com/tools/help/lint.html)\r\n * [_Checkstyle_](http://checkstyle.sourceforge.net/)\r\n * [_CPPLint_](https://github.com/theandrewdavis/cpplint)\r\n * [_CPPCheck_](http://cppcheck.sourceforge.net/)\r\n * [_CSSLint_](https://github.com/CSSLint/csslint)\r\n * [_Findbugs_](http://findbugs.sourceforge.net/)\r\n * [_Flake8_](http://flake8.readthedocs.org/en/latest/) ([_PyLint_](https://www.pylint.org/), [_Pep8_](https://github.com/PyCQA/pycodestyle), [_Mccabe_](https://pypi.python.org/pypi/mccabe), [_PyFlakes_](https://pypi.python.org/pypi/pyflakes))\r\n * [_JSHint_](http://jshint.com/)\r\n * _Lint_ A common XML format, used by different linters.\r\n * [_PerlCritic_](https://github.com/Perl-Critic)\r\n * [_PMD_](https://pmd.github.io/)\r\n * [_ReSharper_](https://www.jetbrains.com/resharper/)\r\n * [_XMLLint_](http://xmlsoft.org/xmllint.html)\r\n\r\nThere is also:\r\n * A [Gradle plugin](https://github.com/tomasbjerre/violation-comments-to-github-gradle-plugin).\r\n * A [Maven plugin](https://github.com/tomasbjerre/violation-comments-to-github-maven-plugin).\r\n\r\nAvailable in Jenkins [here](https://wiki.jenkins-ci.org/display/JENKINS/Violation+Comments+to+GitHub+Plugin).\r\n\r\nYou will need to the **pull request id** for the pull request that was built. You may want to have a look at [GitHub Pull Request Builder Plugin](https://wiki.jenkins-ci.org/display/JENKINS/GitHub+pull+request+builder+plugin), it provides the environment variable `ghprbPullId`.\r\n\r\n# Screenshots\r\n\r\nWhen installed, a post build action will be available.\r\n\r\n![Post build action menu](https://github.com/jenkinsci/violation-comments-to-github-jenkins-plugin/blob/master/sandbox/jenkins-postbuildmenu.png)\r\n\r\nThe configuration looks like this.\r\n\r\n![Post build action](https://github.com/jenkinsci/violation-comments-to-github-jenkins-plugin/blob/master/sandbox/jenkins-postbuildaction.png)\r\n\r\nThe pull request will be commented like this.\r\n\r\n![Pull request comment](https://github.com/jenkinsci/violation-comments-to-github-jenkins-plugin/blob/master/sandbox/github-pr-diff-comment.png)\r\n\r\n## Job DSL Plugin\r\n\r\nThis plugin can be used with the Job DSL Plugin.\r\n\r\n```\r\njob('example') {\r\n publishers {\r\n  violationsToGitHubRecorder {\r\n   config {\r\n    gitHubUrl(\"https://api.github.com/\")\r\n    repositoryOwner(\"tomasbjerre\")\r\n    repositoryName(\"violations-test\")\r\n    pullRequestId(\"2\")\r\n    useOAuth2Token(false)\r\n    oAuth2Token(\"\")\r\n    useUsernamePasswordCredentials(false)\r\n    usernamePasswordCredentialsId(\"\")\r\n    useUsernamePassword(true)\r\n    username(\"\")\r\n    password(\"\")\r\n    createSingleFileComments(true)\r\n    createCommentWithAllSingleFileComments(true)\r\n    commentOnlyChangedContent(true)\r\n    violationConfigs {\r\n     violationConfig {\r\n      reporter(\"FINDBUGS\")\r\n      pattern(\".*/findbugs/.*\\\\.xml\\$\")\r\n     }\r\n    }\r\n   }\r\n  }\r\n }\r\n}\r\n```\r\n\r\n## Pipeline Plugin\r\n\r\nThis plugin can be used with the Pipeline Plugin:\r\n\r\n```\r\nnode {\r\n\r\n checkout([\r\n  $class: 'GitSCM', \r\n  branches: [[ name: '*/master' ]], \r\n  doGenerateSubmoduleConfigurations: false,\r\n  extensions: [],\r\n  submoduleCfg: [],\r\n  userRemoteConfigs: [[ url: 'https://github.com/tomasbjerre/violations-test.git' ]]\r\n ])\r\n\r\n sh '''\r\n ./gradlew build\r\n '''\r\n\r\n step([\r\n  $class: 'ViolationsToGitHubRecorder', \r\n  config: [\r\n   gitHubUrl: 'https://api.github.com/', \r\n   repositoryOwner: 'tomasbjerre', \r\n   repositoryName: 'violations-test', \r\n   pullRequestId: '2', \r\n   useOAuth2Token: false, \r\n   oAuth2Token: '', \r\n   useUsernamePassword: true, \r\n   username: 'admin', \r\n   password: 'admin', \r\n   useUsernamePasswordCredentials: false, \r\n   usernamePasswordCredentialsId: '',\r\n   createCommentWithAllSingleFileComments: true, \r\n   createSingleFileComments: true, \r\n   commentOnlyChangedContent: true, \r\n   violationConfigs: [\r\n    [ pattern: '.*/checkstyle/.*\\\\.xml$', reporter: 'CHECKSTYLE' ], \r\n    [ pattern: '.*/findbugs/.*\\\\.xml$', reporter: 'FINDBUGS' ], \r\n   ]\r\n  ]\r\n ])\r\n}\r\n```\r\n\r\n# Plugin development\r\nMore details on Jenkins plugin development is available [here](https://wiki.jenkins-ci.org/display/JENKINS/Plugin+tutorial).\r\n\r\nThere is a ```/build.sh``` that will perform a full build and test the plugin. You may have a look at sandbox/settings.xml on how to configure your Maven settings.\r\n\r\nA release is created like this. You need to clone from jenkinsci-repo, with https and have username/password in settings.xml.\r\n```\r\nmvn release:prepare release:perform\r\n```\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}